import {v1} from "uuid";
import {Filter, ITodolist, ITodolistAPI} from "../../types";
import {
    addTodolistAC,
    changeTodolistFilterAC,
    removeTodolistAC,
    renameTodolistAC, setTodolistAC,
    TodolistSlice
} from "./todolistsReducer";

//TODO: Fix test correctly

test('correct todolist should be removed', () => {
    const todolistId1 = v1()
    const todolistId2 = v1()
    const startState: Array<ITodolist> = [
        {id: todolistId1, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
        {id: todolistId2, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
    ]

    const endState = TodolistSlice.caseReducers.removeTodolistAC(startState, removeTodolistAC({todolistId: todolistId1}))

    expect(endState.length).toBe(1)
    expect(endState[0].id).toBe(todolistId2)
})
test('correct todolist should be added', () => {
    const todolistId1 = v1()
    const todolistId2 = v1()
    const startState: Array<ITodolist> = [
        {id: todolistId1, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
        {id: todolistId2, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
    ]
    const newID = v1()
    const endState = TodolistSlice.caseReducers.addTodolistAC(startState, addTodolistAC({
        todolistTitle: "newTitle",
        todolistId: newID
    }))

    expect(endState.length).toBe(3)
    expect(endState[2].title).toBe("newTitle")
    expect(endState[2].filter).toBe(Filter.ALL)
})

test('correct todolist should be renamed', () => {
    const todolistId1 = v1()
    const todolistId2 = v1()
    const startState: Array<ITodolist> = [
        {id: todolistId1, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
        {id: todolistId2, title: "2", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
    ]

    const endState = TodolistSlice.caseReducers.renameTodolistAC(startState, renameTodolistAC({
        todolistTitle: "newTitle",
        todolistId: todolistId1
    }))

    expect(endState.length).toBe(2)
    expect(endState[0].id).toBe(todolistId1)
    expect(endState[1].id).toBe(todolistId2)
    expect(endState[0].title).toBe("newTitle")
    expect(endState[1].title).toBe("2")
    expect(endState[0].filter).toBe(Filter.ALL)
    expect(endState[1].filter).toBe(Filter.ALL)
})
test("correct filter of todolist  should be changed", () => {
    const todolistId1 = v1()
    const todolistId2 = v1()
    const startState: Array<ITodolist> = [
        {id: todolistId1, title: "1", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
        {id: todolistId2, title: "2", filter: Filter.ALL, addedDate: (new Date()).toTimeString(), order: 0},
    ]
    const endState = TodolistSlice.caseReducers.changeTodolistFilterAC(startState, changeTodolistFilterAC({
        todolistFilter: Filter.ACTIVE,
        todolistId: todolistId1
    }))

    expect(endState.length).toBe(2)
    expect(endState[0].id).toBe(todolistId1)
    expect(endState[1].id).toBe(todolistId2)
    expect(endState[0].title).toBe("1")
    expect(endState[1].title).toBe("2")
    expect(endState[0].filter).toBe(Filter.ACTIVE)
    expect(endState[1].filter).toBe(Filter.ALL)

})

test("todolist should be setted", () => {
    const todolistId1 = v1()
    const todolistId2 = v1()
    const addingTodolist: Array<ITodolistAPI> = [
        {id: todolistId1, title: "1", addedDate: (new Date()).toTimeString(), order: 0},
        {id: todolistId2, title: "2", addedDate: (new Date()).toTimeString(), order: 0},
    ]
    const startState: Array<ITodolist> = []
    const endState = TodolistSlice.caseReducers.setTodolistAC(startState, setTodolistAC({todolists: addingTodolist}))
    expect(endState.length).toBe(2)
    expect(endState[0].filter).toBe(Filter.ALL)
})